"use strict";var _interopRequireWildcard=require("@babel/runtime-corejs2/helpers/interopRequireWildcard"),_interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault"),_Object$defineProperty=require("@babel/runtime-corejs2/core-js/object/define-property");_Object$defineProperty(exports,"__esModule",{value:!0}),exports.default=base,exports.singleConfig=singleConfig,exports.multiConfig=multiConfig,exports.checkError=checkError;var _keys=_interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/keys")),_assign=_interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/assign")),_copyWebpackPlugin=_interopRequireDefault(require("copy-webpack-plugin")),_path=_interopRequireDefault(require("path")),_webpackInjectPlugin=_interopRequireWildcard(require("webpack-inject-plugin")),_webpackZipPlugin=_interopRequireDefault(require("../plugins/webpack-zip-plugin")),_webpackMainPlugin=_interopRequireDefault(require("../plugins/webpack-main-plugin")),_webpackMerge=_interopRequireDefault(require("webpack-merge")),_cliSharedUtils=require("@vivo-minigame/cli-shared-utils"),_webpack=_interopRequireDefault(require("./webpack.config")),_manifest=require("../lib/manifest"),paths=_interopRequireWildcard(require("../lib/paths")),_readdir=_interopRequireDefault(require("../lib/readdir")),_exConfig=_interopRequireDefault(require("../lib/exConfig")),_constanst=require("../lib/constanst");// import path from 'path'
/**
 * 获取基础配置
 * @param {Boolean} release 是否是release包
 * @param {Object} entry 根据分包配置生成的webpack 入口配置
 * @param {Array} resConfig 根据分包配置生成的资源配置，分包的资源拷贝到分包下的文件夹里
 */function base({release:a,entry:b,resConfig:c,pluginPath:d}){// const ignoreRes = resConfig.map(r => `${path.join(r.root, '**', '*')}`) // 忽略掉分包下的资源
// const copyRes = resConfig.map(r => ({ // 拷贝分包下的资源到相应的分包目录
//   from: path.join(paths.SRC, r.root),
//   to: path.join(paths.BUILD, r.name, r.root),
//   ignore: FILE_EXT_IGNORES.map(ext => `*${ext}`)
// }))
const e=d&&(0,_readdir.default)(_path.default.resolve(_cliSharedUtils.projectPath,d)),f=d?e.map(a=>({from:_path.default.resolve(_cliSharedUtils.projectPath,d,a),to:_path.default.resolve(paths.BUILD,d,a)})):[],g=(0,_webpackMerge.default)(_webpack.default,{optimization:{minimize:a},devtool:a?"none":"source-map",entry:(0,_assign.default)({game:paths.ENTRY},b),plugins:[new _copyWebpackPlugin.default([{from:paths.SRC,ignore:[..._constanst.FILE_EXT_IGNORES.map(a=>`*${a}`),...[]],// resConfig是为了忽略掉分包中的资源
transform(b,c){// 拷贝manifest.json时，更新里面的config信息
return-1===c.indexOf(_constanst.MANIFEST)?b:(0,_manifest.update)({content:b,release:a})}},...f])]});return(0,_exConfig.default)(g,{context:paths.PROJECT_PATH,src:paths.SRC,build:paths.BUILD}),g}/**
 * 获取打原整包的配置
 * @param {Object} base webpack基础配置
 * @param {Object} param1 运行进参数
 */function singleConfig(a,{release:b,packageName:c,externals:d,inject:e,pluginPath:f,subpackages:g}){// 是否注入对分包模块的依赖，如果不注入，由CP用户注入，能力开放给CP用户
const h=e?[new _webpackInjectPlugin.default(()=>(0,_keys.default)(d).reduce((a,b)=>`require('${b}');${a}`,""),{entryName:_constanst.ENTRY_NAME,entryOrder:_webpackInjectPlugin.ENTRY_ORDER.Last})]:[];return(0,_webpackMerge.default)(a,{externals:d,plugins:[new _webpackMainPlugin.default({singlePackage:!0}),new _webpackZipPlugin.default({release:b,packageName:c,singlePackage:!0,// 打原整包
pluginPath:f,subpackages:g}),...h]})}/**
 * 获取打分包的配置
 * @param {Object} base webpack基础配置
 * @param {Object} param1 运行进参数
 */function multiConfig(a,{release:b,packageName:c,externals:d,subpackages:e,pluginPath:f}){return(0,_webpackMerge.default)(a,{externals:d,plugins:[new _webpackMainPlugin.default({singlePackage:!1,subpackages:e}),new _webpackZipPlugin.default({release:b,packageName:c,singlePackage:!1,// 打新分包，为false必须提供subpackages
subpackages:e,pluginPath:f})]})}/**
 * 检查webpack编译完成后是否有错误
 * @param {Object} err webpack错误
 * @param {Object} stats 编译状态
 */function checkError(a,b){if(a)return(0,_cliSharedUtils.error)(a.stack||a),a.details&&(0,_cliSharedUtils.error)(a.details),!0;const c=b.toJson();if(b.hasWarnings()&&(0,_cliSharedUtils.warn)(c.warnings),b.hasErrors())return(0,_cliSharedUtils.error)(c.errors),!0}